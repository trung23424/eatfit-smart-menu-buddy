
import { User, Settings, Award, Heart, BookOpen, CreditCard, LogOut, Edit, Camera } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { useState } from "react";

const userStats = [
  { label: "Ng√†y theo d√µi", value: "45", icon: "üìÖ" },
  { label: "Th·ª≠ th√°ch ho√†n th√†nh", value: "8", icon: "üèÜ" },
  { label: "ƒêi·ªÉm t√≠ch l≈©y", value: "2,450", icon: "‚≠ê" },
  { label: "B·∫°n b√®", value: "23", icon: "üë•" }
];

const achievements = [
  { name: "EatClean Master", description: "Ho√†n th√†nh 30 ng√†y ƒÉn s·∫°ch", icon: "ü•ó", unlocked: true },
  { name: "Meal Prep Pro", description: "Chu·∫©n b·ªã tr∆∞·ªõc 50 b·ªØa ƒÉn", icon: "üì¶", unlocked: true },
  { name: "Community Hero", description: "Nh·∫≠n 100 l∆∞·ª£t th√≠ch", icon: "‚ù§Ô∏è", unlocked: false },
  { name: "Health Guardian", description: "Duy tr√¨ m·ª•c ti√™u 90 ng√†y", icon: "üõ°Ô∏è", unlocked: false }
];

const menuItems = [
  { icon: Settings, label: "C√†i ƒë·∫∑t t√†i kho·∫£n", color: "text-gray-600" },
  { icon: Heart, label: "S·ª©c kh·ªèe & m·ª•c ti√™u", color: "text-red-500" },
  { icon: BookOpen, label: "Kh√≥a h·ªçc dinh d∆∞·ª°ng", color: "text-blue-500" },
  { icon: Award, label: "Th√†nh t√≠ch & huy hi·ªáu", color: "text-yellow-500" },
  { icon: CreditCard, label: "EatFit Premium", color: "text-purple-500" },
  { icon: LogOut, label: "ƒêƒÉng xu·∫•t", color: "text-red-600" }
];

const ProfilePage = () => {
  const [userInfo, setUserInfo] = useState({
    name: "Minh Anh",
    email: "minhanh@gmail.com",
    goal: "Gi·∫£m c√¢n",
    progress: 75
  });

  const editProfile = () => {
    console.log('Editing profile');
    const newName = prompt('Nh·∫≠p t√™n m·ªõi:', userInfo.name);
    if (newName) {
      setUserInfo(prev => ({ ...prev, name: newName }));
      console.log('Profile updated:', { name: newName });
    }
  };

  const changeAvatar = () => {
    console.log('Changing avatar');
    alert('Thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán\n\nT√≠nh nƒÉng n√†y s·∫Ω cho ph√©p b·∫°n:\n- Ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã\n- Ch·ª•p ·∫£nh m·ªõi\n- C·∫Øt v√† ch·ªânh s·ª≠a ·∫£nh');
  };

  const handleMenuItem = (item: any) => {
    console.log('Menu item clicked:', item.label);
    
    switch (item.label) {
      case "C√†i ƒë·∫∑t t√†i kho·∫£n":
        alert('C√†i ƒë·∫∑t t√†i kho·∫£n\n\nB·∫°n c√≥ th·ªÉ:\n- Thay ƒë·ªïi th√¥ng tin c√° nh√¢n\n- C·∫≠p nh·∫≠t m·∫≠t kh·∫©u\n- Qu·∫£n l√Ω quy·ªÅn ri√™ng t∆∞');
        break;
      case "S·ª©c kh·ªèe & m·ª•c ti√™u":
        alert('S·ª©c kh·ªèe & m·ª•c ti√™u\n\nQu·∫£n l√Ω:\n- M·ª•c ti√™u c√¢n n·∫∑ng\n- Ch·ªâ s·ªë BMI\n- L·ªãch s·ª≠ s·ª©c kh·ªèe\n- B√°o c√°o ti·∫øn ƒë·ªô');
        break;
      case "Kh√≥a h·ªçc dinh d∆∞·ª°ng":
        alert('Kh√≥a h·ªçc dinh d∆∞·ª°ng\n\nKh√°m ph√°:\n- Ki·∫øn th·ª©c dinh d∆∞·ª°ng c∆° b·∫£n\n- C√°ch l√™n k·∫ø ho·∫°ch b·ªØa ƒÉn\n- Tips n·∫•u ƒÉn healthy\n- Video h∆∞·ªõng d·∫´n');
        break;
      case "Th√†nh t√≠ch & huy hi·ªáu":
        alert('Th√†nh t√≠ch & huy hi·ªáu\n\nXem:\n- T·∫•t c·∫£ huy hi·ªáu ƒë√£ ƒë·∫°t\n- Ti·∫øn ƒë·ªô huy hi·ªáu\n- L·ªãch s·ª≠ th√†nh t√≠ch\n- So s√°nh v·ªõi b·∫°n b√®');
        break;
      case "EatFit Premium":
        alert('EatFit Premium\n\nN√¢ng c·∫•p ƒë·ªÉ c√≥:\n- Th·ª±c ƒë∆°n kh√¥ng gi·ªõi h·∫°n\n- T∆∞ v·∫•n 1:1 v·ªõi chuy√™n gia\n- Ph√¢n t√≠ch chi ti·∫øt\n- Lo·∫°i b·ªè qu·∫£ng c√°o');
        break;
      case "ƒêƒÉng xu·∫•t":
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?')) {
          console.log('User logged out');
          alert('ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!');
        }
        break;
    }
  };

  const viewAchievement = (achievement: any) => {
    console.log('Viewing achievement:', achievement);
    const status = achievement.unlocked ? 'ƒê√É M·ªû KH√ìA' : 'CH∆ØA ƒê·∫†T';
    alert(`${achievement.icon} ${achievement.name}\n\n${achievement.description}\n\nTr·∫°ng th√°i: ${status}`);
  };

  return (
    <div className="p-3 space-y-4">
      {/* Profile Header */}
      <Card className="gradient-bg text-white">
        <CardContent className="p-4">
          <div className="flex items-center space-x-3">
            <div className="relative">
              <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center text-2xl">
                üë©‚Äçü¶±
              </div>
              <button
                onClick={changeAvatar}
                className="absolute -bottom-1 -right-1 w-6 h-6 bg-eatfit-green rounded-full flex items-center justify-center"
              >
                <Camera className="h-3 w-3 text-white" />
              </button>
            </div>
            <div className="flex-1">
              <h2 className="text-lg font-bold">{userInfo.name}</h2>
              <p className="text-white/80 text-sm">{userInfo.email}</p>
              <div className="flex items-center space-x-2 mt-1">
                <span className="text-xs bg-white/20 px-2 py-0.5 rounded-full">Premium</span>
                <span className="text-xs">M·ª•c ti√™u: {userInfo.goal}</span>
              </div>
            </div>
            <Button size="sm" variant="ghost" className="text-white hover:bg-white/20" onClick={editProfile}>
              <Edit className="h-4 w-4" />
            </Button>
          </div>
          
          <div className="mt-3">
            <div className="flex justify-between text-sm mb-1">
              <span>Ti·∫øn ƒë·ªô m·ª•c ti√™u th√°ng n√†y</span>
              <span>{userInfo.progress}%</span>
            </div>
            <div className="bg-white/20 rounded-full h-2">
              <div 
                className="bg-white rounded-full h-2 transition-all"
                style={{ width: `${userInfo.progress}%` }}
              ></div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* User Stats */}
      <div className="grid grid-cols-2 gap-2">
        {userStats.map((stat, index) => (
          <Card key={index} className="card-hover cursor-pointer" onClick={() => console.log('Stat clicked:', stat.label)}>
            <CardContent className="p-3 text-center">
              <div className="text-lg mb-1">{stat.icon}</div>
              <div className="text-lg font-bold text-gray-800">{stat.value}</div>
              <div className="text-xs text-gray-500">{stat.label}</div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Recent Achievements */}
      <div>
        <h3 className="text-sm font-semibold text-gray-800 mb-2">üèÜ Th√†nh t√≠ch g·∫ßn ƒë√¢y</h3>
        <div className="grid grid-cols-2 gap-2">
          {achievements.map((achievement, index) => (
            <Card 
              key={index} 
              className={`card-hover cursor-pointer ${achievement.unlocked ? '' : 'opacity-50'}`}
              onClick={() => viewAchievement(achievement)}
            >
              <CardContent className="p-3 text-center">
                <div className="text-lg mb-1">{achievement.icon}</div>
                <h4 className="text-xs font-medium">{achievement.name}</h4>
                <p className="text-xs text-gray-500 mt-1">{achievement.description}</p>
                {achievement.unlocked && (
                  <div className="w-2 h-2 bg-green-500 rounded-full mx-auto mt-2"></div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Menu Items */}
      <div>
        <h3 className="text-sm font-semibold text-gray-800 mb-2">‚öôÔ∏è C√†i ƒë·∫∑t & ti·ªán √≠ch</h3>
        <Card>
          <CardContent className="p-0">
            {menuItems.map((item, index) => {
              const Icon = item.icon;
              return (
                <button
                  key={index}
                  onClick={() => handleMenuItem(item)}
                  className="w-full flex items-center space-x-3 p-3 hover:bg-gray-50 transition-colors border-b border-gray-100 last:border-b-0"
                >
                  <Icon className={`h-5 w-5 ${item.color}`} />
                  <span className="text-sm text-gray-700 flex-1 text-left">{item.label}</span>
                  <span className="text-gray-400">‚Ä∫</span>
                </button>
              );
            })}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ProfilePage;
